generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String?
  image     String?
  emailVerified  DateTime?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relações
  flows     Flow[]
  accounts  Account[]      // ← Suporte NextAuth
  sessions  Session[]      // ← Suporte NextAuth
}

model Flow {
  id         Int       @id @default(autoincrement())
  title      String
  importance String
  complete   Boolean   @default(false)
  tempoTotal Int       @default(0)
  startTime  DateTime?
  endTime    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userId     Int
  user       User      @relation(fields: [userId], references: [id])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   // removido @db.Text
  access_token       String?   // removido @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   // removido @db.Text
  session_state      String?

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}
